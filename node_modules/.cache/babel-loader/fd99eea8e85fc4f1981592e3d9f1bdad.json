{"ast":null,"code":"import _slicedToArray from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import SubForm from'./SubForm';import{DialogTitle}from'./CustomDialogTitle';import{Dialog,DialogContent,Button,MenuItem,ListItemIcon}from'@material-ui/core';import{useDialogStyles}from'../styles/muiStyles';import AddCircleIcon from'@material-ui/icons/AddCircle';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var SubFormModal=function SubFormModal(_ref){var type=_ref.type,handleCloseMenu=_ref.handleCloseMenu;var classes=useDialogStyles();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];var handleClickOpen=function handleClickOpen(){setOpen(true);};var handleClose=function handleClose(){setOpen(false);};var handleOpenMenu=function handleOpenMenu(){handleClickOpen();handleCloseMenu();};return/*#__PURE__*/_jsxs(\"div\",{children:[type!=='menu'?/*#__PURE__*/_jsx(Button,{color:\"primary\",variant:\"contained\",onClick:handleClickOpen,fullWidth:true,className:classes.createSubBtn,size:\"large\",startIcon:/*#__PURE__*/_jsx(AddCircleIcon,{}),children:\"Create New Subreddish\"}):/*#__PURE__*/_jsx(MenuItem,{onClick:handleOpenMenu,children:/*#__PURE__*/_jsxs(ListItemIcon,{children:[/*#__PURE__*/_jsx(AddCircleIcon,{style:{marginRight:7}}),\"Create Subreddish\"]})}),/*#__PURE__*/_jsxs(Dialog,{open:open,onClose:handleClose,maxWidth:\"sm\",classes:{paper:classes.dialogWrapper},fullWidth:true,children:[/*#__PURE__*/_jsx(DialogTitle,{onClose:handleClose,children:\"Create a new subreddish\"}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsx(SubForm,{})})]})]});};export default SubFormModal;","map":{"version":3,"sources":["/home/thaddydore/Desktop/reddish-clone/client/src/components/SubFormModal.js"],"names":["React","useState","SubForm","DialogTitle","Dialog","DialogContent","Button","MenuItem","ListItemIcon","useDialogStyles","AddCircleIcon","SubFormModal","type","handleCloseMenu","classes","open","setOpen","handleClickOpen","handleClose","handleOpenMenu","createSubBtn","marginRight","paper","dialogWrapper"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CAEA,OAASC,WAAT,KAA4B,qBAA5B,CACA,OACEC,MADF,CAEEC,aAFF,CAGEC,MAHF,CAIEC,QAJF,CAKEC,YALF,KAMO,mBANP,CAOA,OAASC,eAAT,KAAgC,qBAAhC,CACA,MAAOC,CAAAA,aAAP,KAA0B,8BAA1B,C,wFAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAA+B,IAA5BC,CAAAA,IAA4B,MAA5BA,IAA4B,CAAtBC,eAAsB,MAAtBA,eAAsB,CAClD,GAAMC,CAAAA,OAAO,CAAGL,eAAe,EAA/B,CACA,cAAwBR,QAAQ,CAAC,KAAD,CAAhC,wCAAOc,IAAP,eAAaC,OAAb,eAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5BD,OAAO,CAAC,IAAD,CAAP,CACD,CAFD,CAIA,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxBF,OAAO,CAAC,KAAD,CAAP,CACD,CAFD,CAIA,GAAMG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3BF,eAAe,GACfJ,eAAe,GAChB,CAHD,CAKA,mBACE,uBACGD,IAAI,GAAK,MAAT,cACC,KAAC,MAAD,EACE,KAAK,CAAC,SADR,CAEE,OAAO,CAAC,WAFV,CAGE,OAAO,CAAEK,eAHX,CAIE,SAAS,KAJX,CAKE,SAAS,CAAEH,OAAO,CAACM,YALrB,CAME,IAAI,CAAC,OANP,CAOE,SAAS,cAAE,KAAC,aAAD,IAPb,mCADD,cAaC,KAAC,QAAD,EAAU,OAAO,CAAED,cAAnB,uBACE,MAAC,YAAD,yBACE,KAAC,aAAD,EAAe,KAAK,CAAE,CAAEE,WAAW,CAAE,CAAf,CAAtB,EADF,uBADF,EAdJ,cAqBE,MAAC,MAAD,EACE,IAAI,CAAEN,IADR,CAEE,OAAO,CAAEG,WAFX,CAGE,QAAQ,CAAC,IAHX,CAIE,OAAO,CAAE,CAAEI,KAAK,CAAER,OAAO,CAACS,aAAjB,CAJX,CAKE,SAAS,KALX,wBAOE,KAAC,WAAD,EAAa,OAAO,CAAEL,WAAtB,qCAPF,cAQE,KAAC,aAAD,wBACE,KAAC,OAAD,IADF,EARF,GArBF,GADF,CAoCD,CArDD,CAuDA,cAAeP,CAAAA,YAAf","sourcesContent":["import React, { useState } from 'react';\nimport SubForm from './SubForm';\n\nimport { DialogTitle } from './CustomDialogTitle';\nimport {\n  Dialog,\n  DialogContent,\n  Button,\n  MenuItem,\n  ListItemIcon,\n} from '@material-ui/core';\nimport { useDialogStyles } from '../styles/muiStyles';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\nconst SubFormModal = ({ type, handleCloseMenu }) => {\n  const classes = useDialogStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpenMenu = () => {\n    handleClickOpen();\n    handleCloseMenu();\n  };\n\n  return (\n    <div>\n      {type !== 'menu' ? (\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={handleClickOpen}\n          fullWidth\n          className={classes.createSubBtn}\n          size=\"large\"\n          startIcon={<AddCircleIcon />}\n        >\n          Create New Subreddish\n        </Button>\n      ) : (\n        <MenuItem onClick={handleOpenMenu}>\n          <ListItemIcon>\n            <AddCircleIcon style={{ marginRight: 7 }} />\n            Create Subreddish\n          </ListItemIcon>\n        </MenuItem>\n      )}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        maxWidth=\"sm\"\n        classes={{ paper: classes.dialogWrapper }}\n        fullWidth\n      >\n        <DialogTitle onClose={handleClose}>Create a new subreddish</DialogTitle>\n        <DialogContent>\n          <SubForm />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default SubFormModal;\n"]},"metadata":{},"sourceType":"module"}