{"ast":null,"code":"import _regeneratorRuntime from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useDispatch}from'react-redux';import{useHistory}from'react-router-dom';import{addNewSub}from'../reducers/subReducer';import{Formik,Form}from'formik';import{TextInput}from'./FormikMuiFields';import{notify}from'../reducers/notificationReducer';import AlertMessage from'./AlertMessage';import*as yup from'yup';import getErrorMsg from'../utils/getErrorMsg';import{useSubredditFormStyles}from'../styles/muiStyles';import{Button,Typography}from'@material-ui/core';import InfoIcon from'@material-ui/icons/Info';import AddIcon from'@material-ui/icons/Add';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var validationSchema=yup.object({subredditName:yup.string().required('Required').max(20,'Must be at most 20 characters').min(3,'Must be at least 3 characters').matches(/^[a-zA-Z0-9-_]*$/,'Only alphanumeric characters allowed, no spaces/symbols'),description:yup.string().required('Required').max(100,'Must be at most 100 characters').min(3,'Must be at least 3 characters')});var SubForm=function SubForm(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var dispatch=useDispatch();var classes=useSubredditFormStyles();var history=useHistory();var handleCreateSub=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values,_ref){var setSubmitting;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setSubmitting=_ref.setSubmitting;_context.prev=1;setSubmitting(true);_context.next=5;return dispatch(addNewSub(values));case 5:setSubmitting(false);dispatch(notify(\"New subreddish created: r/\".concat(values.subredditName),'success'));history.push(\"/r/\".concat(values.subredditName));_context.next=14;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](1);setSubmitting(false);dispatch(notify(getErrorMsg(_context.t0),'error'));case 14:case\"end\":return _context.stop();}}},_callee,null,[[1,10]]);}));return function handleCreateSub(_x,_x2){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:classes.formWrapper,children:[/*#__PURE__*/_jsx(Formik,{validateOnChange:true,initialValues:{subredditName:'',description:''},onSubmit:handleCreateSub,validationSchema:validationSchema,children:function children(_ref3){var isSubmitting=_ref3.isSubmitting;return/*#__PURE__*/_jsxs(Form,{className:classes.form,children:[/*#__PURE__*/_jsxs(\"div\",{className:classes.input,children:[/*#__PURE__*/_jsx(Typography,{className:classes.inputIconText,color:\"primary\",variant:\"h5\",children:\"r/\"}),/*#__PURE__*/_jsx(TextInput,{name:\"subredditName\",type:\"text\",placeholder:\"Enter name\",label:\"Subreddish Name\",required:true,fullWidth:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:classes.descInput,children:[/*#__PURE__*/_jsx(InfoIcon,{className:classes.inputIcon,color:\"primary\"}),/*#__PURE__*/_jsx(TextInput,{name:\"description\",type:\"text\",placeholder:\"Enter description\",label:\"Description\",required:true,fullWidth:true,variant:\"outlined\",multiline:true,rows:2,maxRows:Infinity})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",color:\"secondary\",variant:\"contained\",size:\"large\",className:classes.submitButton,disabled:isSubmitting,startIcon:/*#__PURE__*/_jsx(AddIcon,{}),children:isSubmitting?'Creating':'Create Subreddish'})]});}}),/*#__PURE__*/_jsx(AlertMessage,{error:error,severity:\"error\",clearError:function clearError(){return setError(null);}})]});};export default SubForm;","map":{"version":3,"sources":["/home/thaddydore/Desktop/reddish-clone/client/src/components/SubForm.js"],"names":["React","useState","useDispatch","useHistory","addNewSub","Formik","Form","TextInput","notify","AlertMessage","yup","getErrorMsg","useSubredditFormStyles","Button","Typography","InfoIcon","AddIcon","validationSchema","object","subredditName","string","required","max","min","matches","description","SubForm","error","setError","dispatch","classes","history","handleCreateSub","values","setSubmitting","push","formWrapper","isSubmitting","form","input","inputIconText","descInput","inputIcon","Infinity","submitButton"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { addNewSub } from '../reducers/subReducer';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport { notify } from '../reducers/notificationReducer';\nimport AlertMessage from './AlertMessage';\nimport * as yup from 'yup';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport { useSubredditFormStyles } from '../styles/muiStyles';\nimport { Button, Typography } from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst validationSchema = yup.object({\n  subredditName: yup\n    .string()\n    .required('Required')\n    .max(20, 'Must be at most 20 characters')\n    .min(3, 'Must be at least 3 characters')\n    .matches(\n      /^[a-zA-Z0-9-_]*$/,\n      'Only alphanumeric characters allowed, no spaces/symbols'\n    ),\n  description: yup\n    .string()\n    .required('Required')\n    .max(100, 'Must be at most 100 characters')\n    .min(3, 'Must be at least 3 characters'),\n});\n\nconst SubForm = () => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const classes = useSubredditFormStyles();\n  const history = useHistory();\n\n  const handleCreateSub = async (values, { setSubmitting }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(addNewSub(values));\n      setSubmitting(false);\n      dispatch(\n        notify(`New subreddish created: r/${values.subredditName}`, 'success')\n      );\n      history.push(`/r/${values.subredditName}`);\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return (\n    <div className={classes.formWrapper}>\n      <Formik\n        validateOnChange={true}\n        initialValues={{ subredditName: '', description: '' }}\n        onSubmit={handleCreateSub}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting }) => (\n          <Form className={classes.form}>\n            <div className={classes.input}>\n              <Typography\n                className={classes.inputIconText}\n                color=\"primary\"\n                variant=\"h5\"\n              >\n                r/\n              </Typography>\n              <TextInput\n                name=\"subredditName\"\n                type=\"text\"\n                placeholder=\"Enter name\"\n                label=\"Subreddish Name\"\n                required\n                fullWidth\n              />\n            </div>\n            <div className={classes.descInput}>\n              <InfoIcon className={classes.inputIcon} color=\"primary\" />\n              <TextInput\n                name=\"description\"\n                type=\"text\"\n                placeholder=\"Enter description\"\n                label=\"Description\"\n                required\n                fullWidth\n                variant=\"outlined\"\n                multiline\n                rows={2}\n                maxRows={Infinity}\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              color=\"secondary\"\n              variant=\"contained\"\n              size=\"large\"\n              className={classes.submitButton}\n              disabled={isSubmitting}\n              startIcon={<AddIcon />}\n            >\n              {isSubmitting ? 'Creating' : 'Create Subreddish'}\n            </Button>\n          </Form>\n        )}\n      </Formik>\n      <AlertMessage\n        error={error}\n        severity=\"error\"\n        clearError={() => setError(null)}\n      />\n    </div>\n  );\n};\n\nexport default SubForm;\n"]},"metadata":{},"sourceType":"module"}