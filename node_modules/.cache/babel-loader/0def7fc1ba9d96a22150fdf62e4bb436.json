{"ast":null,"code":"import _regeneratorRuntime from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import postService from'../services/posts';var searchReducer=function searchReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'SET_SEARCH_RESULTS':return action.payload;case'TOGGLE_SEARCH_VOTE':return _objectSpread(_objectSpread({},state),{},{results:state.results.map(function(r){return r.id!==action.payload.id?r:_objectSpread(_objectSpread({},r),action.payload.data);})});case'LOAD_SEARCH_POSTS':return _objectSpread(_objectSpread({},action.payload),{},{results:[].concat(_toConsumableArray(state.results),_toConsumableArray(action.payload.results))});default:return state;}};export var setSearchResults=function setSearchResults(query){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var results;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return postService.getSearchResults(query,10,1);case 2:results=_context.sent;dispatch({type:'SET_SEARCH_RESULTS',payload:results});case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var loadSearchPosts=function loadSearchPosts(query,page){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var results;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return postService.getSearchResults(query,10,page);case 2:results=_context2.sent;dispatch({type:'LOAD_SEARCH_POSTS',payload:results});case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var toggleUpvote=function toggleUpvote(id,upvotedBy,downvotedBy){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var pointsCount;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:pointsCount=upvotedBy.length-downvotedBy.length;if(pointsCount<0){pointsCount=0;}dispatch({type:'TOGGLE_SEARCH_VOTE',payload:{id:id,data:{upvotedBy:upvotedBy,pointsCount:pointsCount,downvotedBy:downvotedBy}}});_context3.next=5;return postService.upvotePost(id);case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var toggleDownvote=function toggleDownvote(id,downvotedBy,upvotedBy){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var pointsCount;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:pointsCount=upvotedBy.length-downvotedBy.length;if(pointsCount<0){pointsCount=0;}dispatch({type:'TOGGLE_SEARCH_VOTE',payload:{id:id,data:{upvotedBy:upvotedBy,pointsCount:pointsCount,downvotedBy:downvotedBy}}});_context4.next=5;return postService.downvotePost(id);case 5:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}();};export default searchReducer;","map":{"version":3,"sources":["/home/thaddydore/Desktop/reddish-clone/client/src/reducers/searchReducer.js"],"names":["postService","searchReducer","state","action","type","payload","results","map","r","id","data","setSearchResults","query","dispatch","getSearchResults","loadSearchPosts","page","toggleUpvote","upvotedBy","downvotedBy","pointsCount","length","upvotePost","toggleDownvote","downvotePost"],"mappings":"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","sourcesContent":["import postService from '../services/posts';\n\nconst searchReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'SET_SEARCH_RESULTS':\n      return action.payload;\n    case 'TOGGLE_SEARCH_VOTE':\n      return {\n        ...state,\n        results: state.results.map((r) =>\n          r.id !== action.payload.id ? r : { ...r, ...action.payload.data }\n        ),\n      };\n    case 'LOAD_SEARCH_POSTS':\n      return {\n        ...action.payload,\n        results: [...state.results, ...action.payload.results],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setSearchResults = (query) => {\n  return async (dispatch) => {\n    const results = await postService.getSearchResults(query, 10, 1);\n\n    dispatch({\n      type: 'SET_SEARCH_RESULTS',\n      payload: results,\n    });\n  };\n};\n\nexport const loadSearchPosts = (query, page) => {\n  return async (dispatch) => {\n    const results = await postService.getSearchResults(query, 10, page);\n\n    dispatch({\n      type: 'LOAD_SEARCH_POSTS',\n      payload: results,\n    });\n  };\n};\n\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async (dispatch) => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_SEARCH_VOTE',\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\n    });\n\n    await postService.upvotePost(id);\n  };\n};\n\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async (dispatch) => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_SEARCH_VOTE',\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\n    });\n\n    await postService.downvotePost(id);\n  };\n};\n\nexport default searchReducer;\n"]},"metadata":{},"sourceType":"module"}