{"ast":null,"code":"var notificationReducer=function notificationReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'SET_NOTIFICATION':return action.payload;case'CLEAR_NOTIFICATION':return null;default:return state;}};var timeoutID=null;export var notify=function notify(message,severity){var duration=severity==='error'?15:5;return function(dispatch){clearTimeout(timeoutID);dispatch({type:'SET_NOTIFICATION',payload:{message:message,severity:severity}});timeoutID=setTimeout(function(){dispatch({type:'CLEAR_NOTIFICATION'});},duration*1000);};};export var clearNotif=function clearNotif(){return function(dispatch){dispatch({type:'CLEAR_NOTIFICATION'});};};export default notificationReducer;","map":{"version":3,"sources":["/home/thaddydore/Desktop/reddish-clone/client/src/reducers/notificationReducer.js"],"names":["notificationReducer","state","action","type","payload","timeoutID","notify","message","severity","duration","dispatch","clearTimeout","setTimeout","clearNotif"],"mappings":"AAAA,GAAMA,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAA0B,IAAzBC,CAAAA,KAAyB,2DAAjB,IAAiB,IAAXC,CAAAA,MAAW,2CACpD,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,kBAAL,CACE,MAAOD,CAAAA,MAAM,CAACE,OAAd,CACF,IAAK,oBAAL,CACE,MAAO,KAAP,CACF,QACE,MAAOH,CAAAA,KAAP,CANJ,CAQD,CATD,CAWA,GAAII,CAAAA,SAAS,CAAG,IAAhB,CAEA,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,OAAD,CAAUC,QAAV,CAAuB,CAC3C,GAAMC,CAAAA,QAAQ,CAAGD,QAAQ,GAAK,OAAb,CAAuB,EAAvB,CAA4B,CAA7C,CAEA,MAAO,UAACE,QAAD,CAAc,CACnBC,YAAY,CAACN,SAAD,CAAZ,CAEAK,QAAQ,CAAC,CACPP,IAAI,CAAE,kBADC,CAEPC,OAAO,CAAE,CAAEG,OAAO,CAAPA,OAAF,CAAWC,QAAQ,CAARA,QAAX,CAFF,CAAD,CAAR,CAKAH,SAAS,CAAGO,UAAU,CAAC,UAAM,CAC3BF,QAAQ,CAAC,CACPP,IAAI,CAAE,oBADC,CAAD,CAAR,CAGD,CAJqB,CAInBM,QAAQ,CAAG,IAJQ,CAAtB,CAKD,CAbD,CAcD,CAjBM,CAmBP,MAAO,IAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CAC9B,MAAO,UAACH,QAAD,CAAc,CACnBA,QAAQ,CAAC,CACPP,IAAI,CAAE,oBADC,CAAD,CAAR,CAGD,CAJD,CAKD,CANM,CAQP,cAAeH,CAAAA,mBAAf","sourcesContent":["const notificationReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'SET_NOTIFICATION':\n      return action.payload;\n    case 'CLEAR_NOTIFICATION':\n      return null;\n    default:\n      return state;\n  }\n};\n\nlet timeoutID = null;\n\nexport const notify = (message, severity) => {\n  const duration = severity === 'error' ? 15 : 5;\n\n  return (dispatch) => {\n    clearTimeout(timeoutID);\n\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      payload: { message, severity },\n    });\n\n    timeoutID = setTimeout(() => {\n      dispatch({\n        type: 'CLEAR_NOTIFICATION',\n      });\n    }, duration * 1000);\n  };\n};\n\nexport const clearNotif = () => {\n  return (dispatch) => {\n    dispatch({\n      type: 'CLEAR_NOTIFICATION',\n    });\n  };\n};\n\nexport default notificationReducer;\n"]},"metadata":{},"sourceType":"module"}