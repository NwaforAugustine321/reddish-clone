{"ast":null,"code":"import _regeneratorRuntime from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import subService from'../services/subs';var subReducer=function subReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'SET_ALL_SUBS_LIST':return _objectSpread(_objectSpread({},state),{},{allSubs:action.payload});case'SET_TOP_SUBS_LIST':return _objectSpread(_objectSpread({},state),{},{topSubs:action.payload});case'SUBSCRIBE_SUB_FROM_LIST':return _objectSpread(_objectSpread({},state),{},{topSubs:state.topSubs.map(function(t){return t.id!==action.payload.id?t:_objectSpread(_objectSpread({},t),action.payload.data);})});case'ADD_NEW_SUB':return _objectSpread(_objectSpread({},state),{},{allSubs:[].concat(_toConsumableArray(state.allSubs),[action.payload])});default:return state;}};export var setSubList=function setSubList(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var subs;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return subService.getAllSubreddits();case 2:subs=_context.sent;dispatch({type:'SET_ALL_SUBS_LIST',payload:subs});case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var setTopSubsList=function setTopSubsList(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var top10Subs;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return subService.getTopSubreddits();case 2:top10Subs=_context2.sent;dispatch({type:'SET_TOP_SUBS_LIST',payload:top10Subs});case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var toggleSubscribe=function toggleSubscribe(id,subscribedBy){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var subscriberCount;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:subscriberCount=subscribedBy.length;dispatch({type:'SUBSCRIBE_SUB_FROM_LIST',payload:{id:id,data:{subscribedBy:subscribedBy,subscriberCount:subscriberCount}}});_context3.next=4;return subService.subscribeSub(id);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var addNewSub=function addNewSub(subredditObj){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var createdSub;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return subService.createSubreddit(subredditObj);case 2:createdSub=_context4.sent;dispatch({type:'ADD_NEW_SUB',payload:{subredditName:createdSub.subredditName,id:createdSub.id}});case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}();};export default subReducer;","map":{"version":3,"sources":["/home/thaddydore/Desktop/reddish-clone/client/src/reducers/subReducer.js"],"names":["subService","subReducer","state","action","type","allSubs","payload","topSubs","map","t","id","data","setSubList","dispatch","getAllSubreddits","subs","setTopSubsList","getTopSubreddits","top10Subs","toggleSubscribe","subscribedBy","subscriberCount","length","subscribeSub","addNewSub","subredditObj","createSubreddit","createdSub","subredditName"],"mappings":"opBAAA,MAAOA,CAAAA,UAAP,KAAuB,kBAAvB,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAA0B,IAAzBC,CAAAA,KAAyB,2DAAjB,IAAiB,IAAXC,CAAAA,MAAW,2CAC3C,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,mBAAL,CACE,sCAAYF,KAAZ,MAAmBG,OAAO,CAAEF,MAAM,CAACG,OAAnC,GACF,IAAK,mBAAL,CACE,sCAAYJ,KAAZ,MAAmBK,OAAO,CAAEJ,MAAM,CAACG,OAAnC,GACF,IAAK,yBAAL,CACE,sCACKJ,KADL,MAEEK,OAAO,CAAEL,KAAK,CAACK,OAAN,CAAcC,GAAd,CAAkB,SAACC,CAAD,QACzBA,CAAAA,CAAC,CAACC,EAAF,GAASP,MAAM,CAACG,OAAP,CAAeI,EAAxB,CAA6BD,CAA7B,gCAAsCA,CAAtC,EAA4CN,MAAM,CAACG,OAAP,CAAeK,IAA3D,CADyB,EAAlB,CAFX,GAMF,IAAK,aAAL,CACE,sCACKT,KADL,MAEEG,OAAO,8BAAMH,KAAK,CAACG,OAAZ,GAAqBF,MAAM,CAACG,OAA5B,EAFT,GAIF,QACE,MAAOJ,CAAAA,KAAP,CAlBJ,CAoBD,CArBD,CAuBA,MAAO,IAAMU,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CAC9B,+FAAO,iBAAOC,QAAP,iJACcb,CAAAA,UAAU,CAACc,gBAAX,EADd,QACCC,IADD,eAGLF,QAAQ,CAAC,CACPT,IAAI,CAAE,mBADC,CAEPE,OAAO,CAAES,IAFF,CAAD,CAAR,CAHK,sDAAP,+DAQD,CATM,CAWP,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAClC,gGAAO,kBAAOH,QAAP,2JACmBb,CAAAA,UAAU,CAACiB,gBAAX,EADnB,QACCC,SADD,gBAGLL,QAAQ,CAAC,CACPT,IAAI,CAAE,mBADC,CAEPE,OAAO,CAAEY,SAFF,CAAD,CAAR,CAHK,wDAAP,iEAQD,CATM,CAWP,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACT,EAAD,CAAKU,YAAL,CAAsB,CACnD,gGAAO,kBAAOP,QAAP,0IACCQ,eADD,CACmBD,YAAY,CAACE,MADhC,CAGLT,QAAQ,CAAC,CACPT,IAAI,CAAE,yBADC,CAEPE,OAAO,CAAE,CAAEI,EAAE,CAAFA,EAAF,CAAMC,IAAI,CAAE,CAAES,YAAY,CAAZA,YAAF,CAAgBC,eAAe,CAAfA,eAAhB,CAAZ,CAFF,CAAD,CAAR,CAHK,uBAQCrB,CAAAA,UAAU,CAACuB,YAAX,CAAwBb,EAAxB,CARD,yDAAP,iEAUD,CAXM,CAaP,MAAO,IAAMc,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,YAAD,CAAkB,CACzC,gGAAO,kBAAOZ,QAAP,4JACoBb,CAAAA,UAAU,CAAC0B,eAAX,CAA2BD,YAA3B,CADpB,QACCE,UADD,gBAGLd,QAAQ,CAAC,CACPT,IAAI,CAAE,aADC,CAEPE,OAAO,CAAE,CACPsB,aAAa,CAAED,UAAU,CAACC,aADnB,CAEPlB,EAAE,CAAEiB,UAAU,CAACjB,EAFR,CAFF,CAAD,CAAR,CAHK,wDAAP,iEAWD,CAZM,CAcP,cAAeT,CAAAA,UAAf","sourcesContent":["import subService from '../services/subs';\n\nconst subReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'SET_ALL_SUBS_LIST':\n      return { ...state, allSubs: action.payload };\n    case 'SET_TOP_SUBS_LIST':\n      return { ...state, topSubs: action.payload };\n    case 'SUBSCRIBE_SUB_FROM_LIST':\n      return {\n        ...state,\n        topSubs: state.topSubs.map((t) =>\n          t.id !== action.payload.id ? t : { ...t, ...action.payload.data }\n        ),\n      };\n    case 'ADD_NEW_SUB':\n      return {\n        ...state,\n        allSubs: [...state.allSubs, action.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setSubList = () => {\n  return async (dispatch) => {\n    const subs = await subService.getAllSubreddits();\n\n    dispatch({\n      type: 'SET_ALL_SUBS_LIST',\n      payload: subs,\n    });\n  };\n};\n\nexport const setTopSubsList = () => {\n  return async (dispatch) => {\n    const top10Subs = await subService.getTopSubreddits();\n\n    dispatch({\n      type: 'SET_TOP_SUBS_LIST',\n      payload: top10Subs,\n    });\n  };\n};\n\nexport const toggleSubscribe = (id, subscribedBy) => {\n  return async (dispatch) => {\n    const subscriberCount = subscribedBy.length;\n\n    dispatch({\n      type: 'SUBSCRIBE_SUB_FROM_LIST',\n      payload: { id, data: { subscribedBy, subscriberCount } },\n    });\n\n    await subService.subscribeSub(id);\n  };\n};\n\nexport const addNewSub = (subredditObj) => {\n  return async (dispatch) => {\n    const createdSub = await subService.createSubreddit(subredditObj);\n\n    dispatch({\n      type: 'ADD_NEW_SUB',\n      payload: {\n        subredditName: createdSub.subredditName,\n        id: createdSub.id,\n      },\n    });\n  };\n};\n\nexport default subReducer;\n"]},"metadata":{},"sourceType":"module"}