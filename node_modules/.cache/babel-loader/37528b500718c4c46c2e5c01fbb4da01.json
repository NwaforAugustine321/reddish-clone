{"ast":null,"code":"import _slicedToArray from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useSelector}from'react-redux';import PostForm from'./PostForm';import HideOnScroll from'./HideOnScroll';import{getCircularAvatar}from'../utils/cloudinaryTransform';import{DialogTitle,DialogContent}from'./CustomDialogTitle';import{Dialog,Button,Fab,IconButton,Paper,Avatar,useMediaQuery,MenuItem,ListItemIcon}from'@material-ui/core';import{useDialogStyles}from'../styles/muiStyles';import{useTheme}from'@material-ui/core/styles';import PostAddIcon from'@material-ui/icons/PostAdd';import ImageIcon from'@material-ui/icons/Image';import LinkIcon from'@material-ui/icons/Link';import EditIcon from'@material-ui/icons/Edit';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AddPostModal=function AddPostModal(_ref){var actionType=_ref.actionType,handleMenuClose=_ref.handleMenuClose,postToEditType=_ref.postToEditType,postToEditTitle=_ref.postToEditTitle,postToEditSub=_ref.postToEditSub,postToEditId=_ref.postToEditId,textSubmission=_ref.textSubmission,linkSubmission=_ref.linkSubmission,fromSubreddit=_ref.fromSubreddit;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];var _useState3=useState('Text'),_useState4=_slicedToArray(_useState3,2),postType=_useState4[0],setPostType=_useState4[1];var user=useSelector(function(state){return state.user;});var classes=useDialogStyles();var theme=useTheme();var isMobile=useMediaQuery(theme.breakpoints.down('xs'));var handleClickOpen=function handleClickOpen(){setOpen(true);};var handleClose=function handleClose(){setOpen(false);};var handleTextPost=function handleTextPost(){setPostType('Text');handleClickOpen();};var handleImagePost=function handleImagePost(){setPostType('Image');handleClickOpen();};var handleLinkPost=function handleLinkPost(){setPostType('Link');handleClickOpen();};var handleMenuClick=function handleMenuClick(){handleClickOpen();handleMenuClose();};if(!user){return null;}return/*#__PURE__*/_jsxs(\"div\",{children:[actionType==='edit'?/*#__PURE__*/_jsx(MenuItem,{onClick:handleMenuClick,children:/*#__PURE__*/_jsxs(ListItemIcon,{children:[/*#__PURE__*/_jsx(EditIcon,{style:{marginRight:7}}),\"Edit Post\"]})}):isMobile?/*#__PURE__*/_jsx(HideOnScroll,{children:/*#__PURE__*/_jsx(Fab,{className:classes.fab,color:\"primary\",onClick:handleClickOpen,children:/*#__PURE__*/_jsx(PostAddIcon,{})})}):/*#__PURE__*/_jsxs(Paper,{variant:\"outlined\",className:classes.createPostWrapper,children:[user.avatar&&user.avatar.exists?/*#__PURE__*/_jsx(Avatar,{alt:user.username,src:getCircularAvatar(user.avatar.imageLink)}):/*#__PURE__*/_jsx(Avatar,{className:classes.defaultAvatar,children:user.username[0]}),/*#__PURE__*/_jsx(Button,{color:\"primary\",variant:\"outlined\",onClick:handleTextPost,fullWidth:true,className:classes.createBtn,startIcon:/*#__PURE__*/_jsx(PostAddIcon,{}),size:\"large\",children:\"Create Post\"}),/*#__PURE__*/_jsxs(\"div\",{className:classes.iconGroup,children:[/*#__PURE__*/_jsx(IconButton,{onClick:handleImagePost,children:/*#__PURE__*/_jsx(ImageIcon,{color:\"primary\"})}),/*#__PURE__*/_jsx(IconButton,{onClick:handleLinkPost,children:/*#__PURE__*/_jsx(LinkIcon,{color:\"primary\"})})]})]}),/*#__PURE__*/_jsxs(Dialog,{open:open,onClose:handleClose,classes:{paper:classes.dialogWrapper},maxWidth:\"md\",fullWidth:true,children:[/*#__PURE__*/_jsx(DialogTitle,{onClose:handleClose,children:actionType==='edit'?'Update your post':'Add a new post'}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsx(PostForm,{actionType:actionType,postType:postType,postToEditType:postToEditType,postToEditTitle:postToEditTitle,postToEditSub:postToEditSub,postToEditId:postToEditId,textSubmission:textSubmission,linkSubmission:linkSubmission,fromSubreddit:fromSubreddit})})]})]});};export default AddPostModal;","map":{"version":3,"sources":["/home/thaddydore/Desktop/reddish-clone/client/src/components/PostFormModal.js"],"names":["React","useState","useSelector","PostForm","HideOnScroll","getCircularAvatar","DialogTitle","DialogContent","Dialog","Button","Fab","IconButton","Paper","Avatar","useMediaQuery","MenuItem","ListItemIcon","useDialogStyles","useTheme","PostAddIcon","ImageIcon","LinkIcon","EditIcon","AddPostModal","actionType","handleMenuClose","postToEditType","postToEditTitle","postToEditSub","postToEditId","textSubmission","linkSubmission","fromSubreddit","open","setOpen","postType","setPostType","user","state","classes","theme","isMobile","breakpoints","down","handleClickOpen","handleClose","handleTextPost","handleImagePost","handleLinkPost","handleMenuClick","marginRight","fab","createPostWrapper","avatar","exists","username","imageLink","defaultAvatar","createBtn","iconGroup","paper","dialogWrapper"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PostForm from './PostForm';\nimport HideOnScroll from './HideOnScroll';\nimport { getCircularAvatar } from '../utils/cloudinaryTransform';\n\nimport { DialogTitle, DialogContent } from './CustomDialogTitle';\nimport {\n  Dialog,\n  Button,\n  Fab,\n  IconButton,\n  Paper,\n  Avatar,\n  useMediaQuery,\n  MenuItem,\n  ListItemIcon,\n} from '@material-ui/core';\nimport { useDialogStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport ImageIcon from '@material-ui/icons/Image';\nimport LinkIcon from '@material-ui/icons/Link';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst AddPostModal = ({\n  actionType,\n  handleMenuClose,\n  postToEditType,\n  postToEditTitle,\n  postToEditSub,\n  postToEditId,\n  textSubmission,\n  linkSubmission,\n  fromSubreddit,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [postType, setPostType] = useState('Text');\n  const user = useSelector((state) => state.user);\n\n  const classes = useDialogStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleTextPost = () => {\n    setPostType('Text');\n    handleClickOpen();\n  };\n\n  const handleImagePost = () => {\n    setPostType('Image');\n    handleClickOpen();\n  };\n\n  const handleLinkPost = () => {\n    setPostType('Link');\n    handleClickOpen();\n  };\n\n  const handleMenuClick = () => {\n    handleClickOpen();\n    handleMenuClose();\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div>\n      {actionType === 'edit' ? (\n        <MenuItem onClick={handleMenuClick}>\n          <ListItemIcon>\n            <EditIcon style={{ marginRight: 7 }} />\n            Edit Post\n          </ListItemIcon>\n        </MenuItem>\n      ) : isMobile ? (\n        <HideOnScroll>\n          <Fab\n            className={classes.fab}\n            color=\"primary\"\n            onClick={handleClickOpen}\n          >\n            <PostAddIcon />\n          </Fab>\n        </HideOnScroll>\n      ) : (\n        <Paper variant=\"outlined\" className={classes.createPostWrapper}>\n          {user.avatar && user.avatar.exists ? (\n            <Avatar\n              alt={user.username}\n              src={getCircularAvatar(user.avatar.imageLink)}\n            />\n          ) : (\n            <Avatar className={classes.defaultAvatar}>\n              {user.username[0]}\n            </Avatar>\n          )}\n          <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={handleTextPost}\n            fullWidth\n            className={classes.createBtn}\n            startIcon={<PostAddIcon />}\n            size=\"large\"\n          >\n            Create Post\n          </Button>\n          <div className={classes.iconGroup}>\n            <IconButton onClick={handleImagePost}>\n              <ImageIcon color=\"primary\" />\n            </IconButton>\n            <IconButton onClick={handleLinkPost}>\n              <LinkIcon color=\"primary\" />\n            </IconButton>\n          </div>\n        </Paper>\n      )}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        classes={{ paper: classes.dialogWrapper }}\n        maxWidth=\"md\"\n        fullWidth={true}\n      >\n        <DialogTitle onClose={handleClose}>\n          {actionType === 'edit' ? 'Update your post' : 'Add a new post'}\n        </DialogTitle>\n        <DialogContent>\n          <PostForm\n            actionType={actionType}\n            postType={postType}\n            postToEditType={postToEditType}\n            postToEditTitle={postToEditTitle}\n            postToEditSub={postToEditSub}\n            postToEditId={postToEditId}\n            textSubmission={textSubmission}\n            linkSubmission={linkSubmission}\n            fromSubreddit={fromSubreddit}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AddPostModal;\n"]},"metadata":{},"sourceType":"module"}