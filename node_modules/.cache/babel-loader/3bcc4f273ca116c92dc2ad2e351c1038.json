{"ast":null,"code":"import _regeneratorRuntime from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React from'react';import{Link as RouterLink}from'react-router-dom';import{useSelector,useDispatch}from'react-redux';import{toggleSubscribe}from'../reducers/subReducer';import{notify}from'../reducers/notificationReducer';import SubFormModal from'./SubFormModal';import LoadingSpinner from'./LoadingSpinner';import getErrorMsg from'../utils/getErrorMsg';import storageService from'../utils/localStorage';import{Paper,Typography,useMediaQuery,Link,Button}from'@material-ui/core';import{useSubPanelStyles}from'../styles/muiStyles';import{useTheme}from'@material-ui/core/styles';import AddIcon from'@material-ui/icons/Add';import CheckIcon from'@material-ui/icons/Check';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TopSubsPanel=function TopSubsPanel(){var _useSelector=useSelector(function(state){return state;}),subs=_useSelector.subs,user=_useSelector.user;var dispatch=useDispatch();var classes=useSubPanelStyles();var theme=useTheme();var isNotDesktop=useMediaQuery(theme.breakpoints.down('md'));if(isNotDesktop){return null;}var loggedUser=storageService.loadUser()||user;var loadingSubs=!subs||!subs.topSubs;var isSubscribed=function isSubscribed(subscribedBy,user){return subscribedBy.includes(user.id);};var handleJoinSub=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(id,subscribedBy,subredditName){var updatedSubscribedBy,message;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:try{if(subscribedBy.includes(user.id)){updatedSubscribedBy=subscribedBy.filter(function(s){return s!==user.id;});}else{updatedSubscribedBy=[].concat(_toConsumableArray(subscribedBy),[user.id]);}dispatch(toggleSubscribe(id,updatedSubscribedBy));message=subscribedBy.includes(user.id)?\"Unsubscribed from r/\".concat(subredditName):\"Subscribed to r/\".concat(subredditName,\"!\");dispatch(notify(message,'success'));}catch(err){dispatch(notify(getErrorMsg(err),'error'));}case 1:case\"end\":return _context.stop();}}},_callee);}));return function handleJoinSub(_x,_x2,_x3){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(Paper,{variant:\"outlined\",className:classes.mainPaper,children:[/*#__PURE__*/_jsxs(Paper,{variant:\"outlined\",className:classes.listPaper,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",color:\"secondary\",className:classes.title,children:\"Top Subreddishes\"}),loadingSubs?/*#__PURE__*/_jsx(LoadingSpinner,{text:\"Fetching subs data...\"}):subs.topSubs.map(function(s,i){return/*#__PURE__*/_jsxs(\"div\",{className:classes.listWrapper,children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",className:classes.listItem,children:[\"\".concat(i+1,\". \"),/*#__PURE__*/_jsxs(Link,{component:RouterLink,to:\"/r/\".concat(s.subredditName),color:\"primary\",children:[\"r/\",s.subredditName]}),\" - \".concat(s.subscriberCount,\" members \")]}),loggedUser&&/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:\"primary\",size:\"small\",startIcon:isSubscribed(s.subscribedBy,user)?/*#__PURE__*/_jsx(CheckIcon,{}):/*#__PURE__*/_jsx(AddIcon,{}),onClick:function onClick(){return handleJoinSub(s.id,s.subscribedBy,s.subredditName);},children:isSubscribed(s.subscribedBy,user)?'Joined':'Join'})]},s.id);})]}),loggedUser&&/*#__PURE__*/_jsx(SubFormModal,{})]});};export default TopSubsPanel;","map":{"version":3,"sources":["/home/thaddydore/Desktop/reddish-clone/client/src/components/TopSubsPanel.js"],"names":["React","Link","RouterLink","useSelector","useDispatch","toggleSubscribe","notify","SubFormModal","LoadingSpinner","getErrorMsg","storageService","Paper","Typography","useMediaQuery","Button","useSubPanelStyles","useTheme","AddIcon","CheckIcon","TopSubsPanel","state","subs","user","dispatch","classes","theme","isNotDesktop","breakpoints","down","loggedUser","loadUser","loadingSubs","topSubs","isSubscribed","subscribedBy","includes","id","handleJoinSub","subredditName","updatedSubscribedBy","filter","s","message","err","mainPaper","listPaper","title","map","i","listWrapper","listItem","subscriberCount"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleSubscribe } from '../reducers/subReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport SubFormModal from './SubFormModal';\nimport LoadingSpinner from './LoadingSpinner';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport storageService from '../utils/localStorage';\n\nimport {\n  Paper,\n  Typography,\n  useMediaQuery,\n  Link,\n  Button,\n} from '@material-ui/core';\nimport { useSubPanelStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst TopSubsPanel = () => {\n  const { subs, user } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const classes = useSubPanelStyles();\n  const theme = useTheme();\n  const isNotDesktop = useMediaQuery(theme.breakpoints.down('md'));\n\n  if (isNotDesktop) {\n    return null;\n  }\n\n  const loggedUser = storageService.loadUser() || user;\n\n  const loadingSubs = !subs || !subs.topSubs;\n\n  const isSubscribed = (subscribedBy, user) => {\n    return subscribedBy.includes(user.id);\n  };\n\n  const handleJoinSub = async (id, subscribedBy, subredditName) => {\n    try {\n      let updatedSubscribedBy;\n\n      if (subscribedBy.includes(user.id)) {\n        updatedSubscribedBy = subscribedBy.filter((s) => s !== user.id);\n      } else {\n        updatedSubscribedBy = [...subscribedBy, user.id];\n      }\n      dispatch(toggleSubscribe(id, updatedSubscribedBy));\n\n      let message = subscribedBy.includes(user.id)\n        ? `Unsubscribed from r/${subredditName}`\n        : `Subscribed to r/${subredditName}!`;\n      dispatch(notify(message, 'success'));\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return (\n    <Paper variant=\"outlined\" className={classes.mainPaper}>\n      <Paper variant=\"outlined\" className={classes.listPaper}>\n        <Typography variant=\"h5\" color=\"secondary\" className={classes.title}>\n          Top Subreddishes\n        </Typography>\n        {loadingSubs ? (\n          <LoadingSpinner text=\"Fetching subs data...\" />\n        ) : (\n          subs.topSubs.map((s, i) => (\n            <div key={s.id} className={classes.listWrapper}>\n              <Typography variant=\"body2\" className={classes.listItem}>\n                {`${i + 1}. `}\n                <Link\n                  component={RouterLink}\n                  to={`/r/${s.subredditName}`}\n                  color=\"primary\"\n                >\n                  r/{s.subredditName}\n                </Link>\n                {` - ${s.subscriberCount} members `}\n              </Typography>\n              {loggedUser && (\n                <Button\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  size=\"small\"\n                  startIcon={\n                    isSubscribed(s.subscribedBy, user) ? (\n                      <CheckIcon />\n                    ) : (\n                      <AddIcon />\n                    )\n                  }\n                  onClick={() =>\n                    handleJoinSub(s.id, s.subscribedBy, s.subredditName)\n                  }\n                >\n                  {isSubscribed(s.subscribedBy, user) ? 'Joined' : 'Join'}\n                </Button>\n              )}\n            </div>\n          ))\n        )}\n      </Paper>\n      {loggedUser && <SubFormModal />}\n    </Paper>\n  );\n};\n\nexport default TopSubsPanel;\n"]},"metadata":{},"sourceType":"module"}