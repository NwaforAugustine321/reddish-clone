{"ast":null,"code":"import _regeneratorRuntime from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useSelector,useDispatch}from'react-redux';import{fetchPosts,loadMorePosts,toggleUpvote,toggleDownvote}from'../reducers/postReducer';import{notify}from'../reducers/notificationReducer';import PostCard from'./PostCard';import SortTabBar from'./SortTabBar';import LoadMoreButton from'./LoadMoreButton';import LoadingSpinner from'./LoadingSpinner';import getErrorMsg from'../utils/getErrorMsg';import{Typography}from'@material-ui/core';import{usePostListStyles}from'../styles/muiStyles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PostList=function PostList(){var _useState=useState('hot'),_useState2=_slicedToArray(_useState,2),sortBy=_useState2[0],setSortBy=_useState2[1];var _useState3=useState(1),_useState4=_slicedToArray(_useState3,2),page=_useState4[0],setPage=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),loadingMore=_useState6[0],setLoadingMore=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),pageLoading=_useState8[0],setPageLoading=_useState8[1];var posts=useSelector(function(state){return state.posts;});var user=useSelector(function(state){return state.user;});var dispatch=useDispatch();var classes=usePostListStyles();var handleTabChange=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e,newValue){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setPageLoading(true);_context.next=4;return dispatch(fetchPosts(newValue));case 4:setSortBy(newValue);setPageLoading(false);if(page!==1){setPage(1);}_context.next=13;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);setPageLoading(false);dispatch(notify(getErrorMsg(_context.t0),'error'));case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function handleTabChange(_x,_x2){return _ref.apply(this,arguments);};}();var handleLoadPosts=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;setLoadingMore(true);_context2.next=4;return dispatch(loadMorePosts(sortBy,page+1));case 4:setPage(function(prevState){return prevState+1;});setLoadingMore(false);_context2.next=12;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);setLoadingMore(false);dispatch(notify(getErrorMsg(_context2.t0),'error'));case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[0,8]]);}));return function handleLoadPosts(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:classes.root,children:[/*#__PURE__*/_jsx(SortTabBar,{sortBy:sortBy,handleTabChange:handleTabChange,subscribedTab:true,user:user}),posts&&posts.results&&!pageLoading?posts.results.map(function(post){return/*#__PURE__*/_jsx(PostCard,{post:post,toggleUpvote:toggleUpvote,toggleDownvote:toggleDownvote},post.id);}):/*#__PURE__*/_jsx(LoadingSpinner,{text:'Fetching posts. Wait a sec.'}),sortBy==='subscribed'&&posts.results.length===0&&/*#__PURE__*/_jsxs(\"div\",{className:classes.noSubscribedPosts,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",color:\"secondary\",children:\"No Posts Found\"}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",color:\"secondary\",children:\"Subscribe to more subs if you haven't!\"})]}),posts&&'next'in posts&&!pageLoading&&/*#__PURE__*/_jsx(LoadMoreButton,{handleLoadPosts:handleLoadPosts,loading:loadingMore})]});};export default PostList;","map":{"version":3,"sources":["/home/thaddydore/Desktop/reddish-clone/client/src/components/PostList.js"],"names":["React","useState","useSelector","useDispatch","fetchPosts","loadMorePosts","toggleUpvote","toggleDownvote","notify","PostCard","SortTabBar","LoadMoreButton","LoadingSpinner","getErrorMsg","Typography","usePostListStyles","PostList","sortBy","setSortBy","page","setPage","loadingMore","setLoadingMore","pageLoading","setPageLoading","posts","state","user","dispatch","classes","handleTabChange","e","newValue","handleLoadPosts","prevState","root","results","map","post","id","length","noSubscribedPosts"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  fetchPosts,\n  loadMorePosts,\n  toggleUpvote,\n  toggleDownvote,\n} from '../reducers/postReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport PostCard from './PostCard';\nimport SortTabBar from './SortTabBar';\nimport LoadMoreButton from './LoadMoreButton';\nimport LoadingSpinner from './LoadingSpinner';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport { Typography } from '@material-ui/core';\nimport { usePostListStyles } from '../styles/muiStyles';\n\nconst PostList = () => {\n  const [sortBy, setSortBy] = useState('hot');\n  const [page, setPage] = useState(1);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [pageLoading, setPageLoading] = useState(false);\n  const posts = useSelector((state) => state.posts);\n  const user = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const classes = usePostListStyles();\n\n  const handleTabChange = async (e, newValue) => {\n    try {\n      setPageLoading(true);\n      await dispatch(fetchPosts(newValue));\n      setSortBy(newValue);\n      setPageLoading(false);\n\n      if (page !== 1) {\n        setPage(1);\n      }\n    } catch (err) {\n      setPageLoading(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const handleLoadPosts = async () => {\n    try {\n      setLoadingMore(true);\n      await dispatch(loadMorePosts(sortBy, page + 1));\n      setPage((prevState) => prevState + 1);\n      setLoadingMore(false);\n    } catch (err) {\n      setLoadingMore(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <SortTabBar\n        sortBy={sortBy}\n        handleTabChange={handleTabChange}\n        subscribedTab={true}\n        user={user}\n      />\n      {posts && posts.results && !pageLoading ? (\n        posts.results.map((post) => (\n          <PostCard\n            post={post}\n            key={post.id}\n            toggleUpvote={toggleUpvote}\n            toggleDownvote={toggleDownvote}\n          />\n        ))\n      ) : (\n        <LoadingSpinner text={'Fetching posts. Wait a sec.'} />\n      )}\n      {sortBy === 'subscribed' && posts.results.length === 0 && (\n        <div className={classes.noSubscribedPosts}>\n          <Typography variant=\"h5\" color=\"secondary\">\n            No Posts Found\n          </Typography>\n          <Typography variant=\"h6\" color=\"secondary\">\n            Subscribe to more subs if you haven't!\n          </Typography>\n        </div>\n      )}\n      {posts && 'next' in posts && !pageLoading && (\n        <LoadMoreButton\n          handleLoadPosts={handleLoadPosts}\n          loading={loadingMore}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default PostList;\n"]},"metadata":{},"sourceType":"module"}