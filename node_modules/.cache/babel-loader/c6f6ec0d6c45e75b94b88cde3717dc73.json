{"ast":null,"code":"import _objectSpread from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/thaddydore/Desktop/reddish-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useSelector,useDispatch}from'react-redux';import{useHistory}from'react-router-dom';import{Formik,Form}from'formik';import{TextInput}from'./FormikMuiFields';import generateBase64Encode from'../utils/genBase64Encode';import{createNewPost,updatePost}from'../reducers/postCommentsReducer';import{notify}from'../reducers/notificationReducer';import*as yup from'yup';import AlertMessage from'./AlertMessage';import getErrorMsg from'../utils/getErrorMsg';import{Button,ButtonGroup,TextField,Typography,useMediaQuery,IconButton}from'@material-ui/core';import{usePostFormStyles}from'../styles/muiStyles';import Autocomplete from'@material-ui/lab/Autocomplete';import{useTheme}from'@material-ui/core/styles';import TitleIcon from'@material-ui/icons/Title';import TextFormatIcon from'@material-ui/icons/TextFormat';import ImageIcon from'@material-ui/icons/Image';import LinkIcon from'@material-ui/icons/Link';import PublishIcon from'@material-ui/icons/Publish';import CheckCircleIcon from'@material-ui/icons/CheckCircle';import CancelIcon from'@material-ui/icons/Cancel';import ChatIcon from'@material-ui/icons/Chat';import PostAddIcon from'@material-ui/icons/PostAdd';import EditIcon from'@material-ui/icons/Edit';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var validationSchema=yup.object({title:yup.string().required('Required'),textSubmission:yup.string(),imageSubmission:yup.string(),linkSubmission:yup.string().matches(/^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\\\-\\\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/,'Valid URL required')});var AddPostForm=function AddPostForm(_ref){var postType=_ref.postType,actionType=_ref.actionType,postToEditType=_ref.postToEditType,postToEditTitle=_ref.postToEditTitle,postToEditSub=_ref.postToEditSub,postToEditId=_ref.postToEditId,textSubmission=_ref.textSubmission,linkSubmission=_ref.linkSubmission,fromSubreddit=_ref.fromSubreddit;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),fileName=_useState2[0],setFileName=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var _useSelector=useSelector(function(state){return state;}),subs=_useSelector.subs;var dispatch=useDispatch();var history=useHistory();var theme=useTheme();var isMobile=useMediaQuery(theme.breakpoints.down('xs'));var classes=usePostFormStyles();var fileInputOnChange=function fileInputOnChange(e,setFieldValue){var file=e.target.files[0];setFileName(file.name);generateBase64Encode(file,setFieldValue);};var clearFileSelection=function clearFileSelection(setFieldValue){setFieldValue('imageSubmission','');setFileName('');};var handleAddPost=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values,_ref2){var setSubmitting,postId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setSubmitting=_ref2.setSubmitting;_context.prev=1;setSubmitting(true);_context.next=5;return dispatch(createNewPost(values));case 5:postId=_context.sent;setSubmitting(false);history.push(\"/comments/\".concat(postId));dispatch(notify('Added new post!','success'));_context.next=15;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);setSubmitting(false);setError(getErrorMsg(_context.t0));case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,11]]);}));return function handleAddPost(_x,_x2){return _ref3.apply(this,arguments);};}();var handleUpdatePost=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values,_ref4){var setSubmitting;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:setSubmitting=_ref4.setSubmitting;_context2.prev=1;setSubmitting(true);_context2.next=5;return dispatch(updatePost(postToEditId,values));case 5:setSubmitting(false);history.push(\"/comments/\".concat(postToEditId));dispatch(notify('Successfully updated the post!','success'));_context2.next=14;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](1);setSubmitting(false);setError(getErrorMsg(_context2.t0));case 14:case\"end\":return _context2.stop();}}},_callee2,null,[[1,10]]);}));return function handleUpdatePost(_x3,_x4){return _ref5.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:classes.root,children:[/*#__PURE__*/_jsx(Formik,{initialValues:{title:actionType==='edit'?postToEditTitle:'',postType:actionType==='edit'?postToEditType:postType,textSubmission:actionType==='edit'?textSubmission:'',linkSubmission:actionType==='edit'?linkSubmission:'',imageSubmission:'',subreddit:actionType==='edit'?postToEditSub.id:!fromSubreddit?'':fromSubreddit.id},onSubmit:actionType==='edit'?handleUpdatePost:handleAddPost,validationSchema:validationSchema,children:function children(_ref6){var isSubmitting=_ref6.isSubmitting,values=_ref6.values,setFieldValue=_ref6.setFieldValue;return/*#__PURE__*/_jsxs(Form,{className:classes.form,children:[actionType!=='edit'&&/*#__PURE__*/_jsxs(ButtonGroup,{color:\"secondary\",fullWidth:true,className:classes.typeBtnGroup,children:[/*#__PURE__*/_jsxs(Button,{onClick:function onClick(){return setFieldValue('postType','Text');},variant:values.postType==='Text'?'contained':'outlined',children:[/*#__PURE__*/_jsx(TextFormatIcon,{style:{marginRight:2}}),\"Text\"]}),/*#__PURE__*/_jsxs(Button,{onClick:function onClick(){return setFieldValue('postType','Image');},variant:values.postType==='Image'?'contained':'outlined',children:[/*#__PURE__*/_jsx(ImageIcon,{style:{marginRight:5}}),\"Image\"]}),/*#__PURE__*/_jsxs(Button,{onClick:function onClick(){return setFieldValue('postType','Link');},variant:values.postType==='Link'?'contained':'outlined',children:[/*#__PURE__*/_jsx(LinkIcon,{style:{marginRight:5}}),\"Link\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:classes.input,children:[/*#__PURE__*/_jsx(Typography,{className:classes.inputIconText,color:\"primary\",variant:\"h5\",children:\"r/\"}),/*#__PURE__*/_jsx(Autocomplete,{name:\"subreddit\",onChange:function onChange(e,value){return setFieldValue('subreddit',value?value.id:'');},fullWidth:true,options:subs&&subs.allSubs,disabled:actionType==='edit'||!!fromSubreddit,getOptionLabel:function getOptionLabel(option){return option.subredditName;},getOptionSelected:function getOptionSelected(option,value){return option.id===value.id;},renderInput:function renderInput(params){return/*#__PURE__*/_jsx(TextField,_objectSpread(_objectSpread({},params),{},{label:actionType==='edit'?postToEditSub.subredditName:!fromSubreddit?'Choose a subreddish':fromSubreddit.subredditName,placeholder:\"Search by name\",required:true,disabled:actionType==='edit'||!!fromSubreddit}));}})]}),/*#__PURE__*/_jsxs(\"div\",{className:classes.input,children:[/*#__PURE__*/_jsx(TitleIcon,{className:classes.inputIcon,color:\"primary\"}),/*#__PURE__*/_jsx(TextInput,{name:\"title\",type:\"text\",placeholder:\"Enter title\",label:\"Title\",required:true,fullWidth:true,disabled:actionType==='edit'})]}),values.postType==='Text'&&/*#__PURE__*/_jsxs(\"div\",{className:classes.textInput,children:[/*#__PURE__*/_jsx(ChatIcon,{className:classes.inputIcon,color:\"primary\"}),/*#__PURE__*/_jsx(TextInput,{name:\"textSubmission\",placeholder:\"Enter text (HTML supported. For ex, \\\"<h1>Like this?</h1>\\\")\",multiline:true,label:\"Text\",required:values.postType==='Text',fullWidth:true,variant:\"outlined\",rows:4,maxRows:Infinity})]}),values.postType==='Image'&&/*#__PURE__*/_jsxs(\"div\",{className:classes.imageInput,children:[/*#__PURE__*/_jsxs(\"div\",{className:classes.imageBtnsWrapper,children:[/*#__PURE__*/_jsx(ImageIcon,{className:classes.inputIcon,color:\"primary\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"image-upload\",accept:\"image/*\",hidden:true,onChange:function onChange(e){return fileInputOnChange(e,setFieldValue);},required:values.postType==='Image'}),/*#__PURE__*/_jsx(Button,{component:\"label\",htmlFor:\"image-upload\",variant:\"outlined\",color:\"primary\",fullWidth:true,startIcon:values.imageSubmission?/*#__PURE__*/_jsx(CheckCircleIcon,{}):/*#__PURE__*/_jsx(PublishIcon,{}),size:isMobile?'small':'medium',className:classes.selectBtn,children:values.imageSubmission?\"\".concat(isMobile?'':'Selected ',\"\\\"\").concat(fileName,\"\\\"\"):\"Select Image\"}),values.imageSubmission&&/*#__PURE__*/_jsx(IconButton,{onClick:function onClick(){return clearFileSelection(setFieldValue);},color:\"secondary\",size:isMobile?'small':'medium',className:classes.clearSelectionBtn,children:/*#__PURE__*/_jsx(CancelIcon,{})})]}),values.imageSubmission&&/*#__PURE__*/_jsx(\"div\",{className:classes.imagePreview,children:/*#__PURE__*/_jsx(\"img\",{alt:fileName,src:values.imageSubmission,width:isMobile?250:350})})]}),values.postType==='Link'&&/*#__PURE__*/_jsxs(\"div\",{className:classes.input,children:[/*#__PURE__*/_jsx(LinkIcon,{className:classes.inputIcon,color:\"primary\"}),/*#__PURE__*/_jsx(TextInput,{name:\"linkSubmission\",type:\"text\",placeholder:\"Enter URL\",label:\"Link\",required:values.postType==='Link',fullWidth:true,variant:actionType==='edit'?'outlined':'standard'})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",color:\"secondary\",variant:\"contained\",size:\"large\",className:classes.submitButton,disabled:isSubmitting,startIcon:postToEditId?/*#__PURE__*/_jsx(EditIcon,{}):/*#__PURE__*/_jsx(PostAddIcon,{}),children:postToEditId?isSubmitting?'Updating':'Update':isSubmitting?'Posting':'Post'})]});}}),/*#__PURE__*/_jsx(AlertMessage,{error:error,severity:\"error\",clearError:function clearError(){return setError(null);}})]});};export default AddPostForm;","map":{"version":3,"sources":["/home/thaddydore/Desktop/reddish-clone/client/src/components/PostForm.js"],"names":["React","useState","useSelector","useDispatch","useHistory","Formik","Form","TextInput","generateBase64Encode","createNewPost","updatePost","notify","yup","AlertMessage","getErrorMsg","Button","ButtonGroup","TextField","Typography","useMediaQuery","IconButton","usePostFormStyles","Autocomplete","useTheme","TitleIcon","TextFormatIcon","ImageIcon","LinkIcon","PublishIcon","CheckCircleIcon","CancelIcon","ChatIcon","PostAddIcon","EditIcon","validationSchema","object","title","string","required","textSubmission","imageSubmission","linkSubmission","matches","AddPostForm","postType","actionType","postToEditType","postToEditTitle","postToEditSub","postToEditId","fromSubreddit","fileName","setFileName","error","setError","state","subs","dispatch","history","theme","isMobile","breakpoints","down","classes","fileInputOnChange","e","setFieldValue","file","target","files","name","clearFileSelection","handleAddPost","values","setSubmitting","postId","push","handleUpdatePost","root","subreddit","id","isSubmitting","form","typeBtnGroup","marginRight","input","inputIconText","value","allSubs","option","subredditName","params","inputIcon","textInput","Infinity","imageInput","imageBtnsWrapper","selectBtn","clearSelectionBtn","imagePreview","submitButton"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport generateBase64Encode from '../utils/genBase64Encode';\nimport { createNewPost, updatePost } from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport * as yup from 'yup';\nimport AlertMessage from './AlertMessage';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport {\n  Button,\n  ButtonGroup,\n  TextField,\n  Typography,\n  useMediaQuery,\n  IconButton,\n} from '@material-ui/core';\nimport { usePostFormStyles } from '../styles/muiStyles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useTheme } from '@material-ui/core/styles';\nimport TitleIcon from '@material-ui/icons/Title';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport ImageIcon from '@material-ui/icons/Image';\nimport LinkIcon from '@material-ui/icons/Link';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst validationSchema = yup.object({\n  title: yup.string().required('Required'),\n  textSubmission: yup.string(),\n  imageSubmission: yup.string(),\n  linkSubmission: yup\n    .string()\n    .matches(\n      /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\\\-\\\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/,\n      'Valid URL required'\n    ),\n});\n\nconst AddPostForm = ({\n  postType,\n  actionType,\n  postToEditType,\n  postToEditTitle,\n  postToEditSub,\n  postToEditId,\n  textSubmission,\n  linkSubmission,\n  fromSubreddit,\n}) => {\n  const [fileName, setFileName] = useState('');\n  const [error, setError] = useState(null);\n  const { subs } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n  const classes = usePostFormStyles();\n\n  const fileInputOnChange = (e, setFieldValue) => {\n    const file = e.target.files[0];\n    setFileName(file.name);\n    generateBase64Encode(file, setFieldValue);\n  };\n\n  const clearFileSelection = (setFieldValue) => {\n    setFieldValue('imageSubmission', '');\n    setFileName('');\n  };\n\n  const handleAddPost = async (values, { setSubmitting }) => {\n    try {\n      setSubmitting(true);\n      const postId = await dispatch(createNewPost(values));\n      setSubmitting(false);\n      history.push(`/comments/${postId}`);\n      dispatch(notify('Added new post!', 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      setError(getErrorMsg(err));\n    }\n  };\n\n  const handleUpdatePost = async (values, { setSubmitting }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(updatePost(postToEditId, values));\n      setSubmitting(false);\n      history.push(`/comments/${postToEditId}`);\n      dispatch(notify('Successfully updated the post!', 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      setError(getErrorMsg(err));\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Formik\n        initialValues={{\n          title: actionType === 'edit' ? postToEditTitle : '',\n          postType: actionType === 'edit' ? postToEditType : postType,\n          textSubmission: actionType === 'edit' ? textSubmission : '',\n          linkSubmission: actionType === 'edit' ? linkSubmission : '',\n          imageSubmission: '',\n          subreddit:\n            actionType === 'edit'\n              ? postToEditSub.id\n              : !fromSubreddit\n              ? ''\n              : fromSubreddit.id,\n        }}\n        onSubmit={actionType === 'edit' ? handleUpdatePost : handleAddPost}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting, values, setFieldValue }) => (\n          <Form className={classes.form}>\n            {actionType !== 'edit' && (\n              <ButtonGroup\n                color=\"secondary\"\n                fullWidth\n                className={classes.typeBtnGroup}\n              >\n                <Button\n                  onClick={() => setFieldValue('postType', 'Text')}\n                  variant={\n                    values.postType === 'Text' ? 'contained' : 'outlined'\n                  }\n                >\n                  <TextFormatIcon style={{ marginRight: 2 }} />\n                  Text\n                </Button>\n                <Button\n                  onClick={() => setFieldValue('postType', 'Image')}\n                  variant={\n                    values.postType === 'Image' ? 'contained' : 'outlined'\n                  }\n                >\n                  <ImageIcon style={{ marginRight: 5 }} />\n                  Image\n                </Button>\n                <Button\n                  onClick={() => setFieldValue('postType', 'Link')}\n                  variant={\n                    values.postType === 'Link' ? 'contained' : 'outlined'\n                  }\n                >\n                  <LinkIcon style={{ marginRight: 5 }} />\n                  Link\n                </Button>\n              </ButtonGroup>\n            )}\n            <div className={classes.input}>\n              <Typography\n                className={classes.inputIconText}\n                color=\"primary\"\n                variant=\"h5\"\n              >\n                r/\n              </Typography>\n              <Autocomplete\n                name=\"subreddit\"\n                onChange={(e, value) =>\n                  setFieldValue('subreddit', value ? value.id : '')\n                }\n                fullWidth\n                options={subs && subs.allSubs}\n                disabled={actionType === 'edit' || !!fromSubreddit}\n                getOptionLabel={(option) => option.subredditName}\n                getOptionSelected={(option, value) => option.id === value.id}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label={\n                      actionType === 'edit'\n                        ? postToEditSub.subredditName\n                        : !fromSubreddit\n                        ? 'Choose a subreddish'\n                        : fromSubreddit.subredditName\n                    }\n                    placeholder=\"Search by name\"\n                    required\n                    disabled={actionType === 'edit' || !!fromSubreddit}\n                  />\n                )}\n              />\n            </div>\n            <div className={classes.input}>\n              <TitleIcon className={classes.inputIcon} color=\"primary\" />\n              <TextInput\n                name=\"title\"\n                type=\"text\"\n                placeholder=\"Enter title\"\n                label=\"Title\"\n                required\n                fullWidth\n                disabled={actionType === 'edit'}\n              />\n            </div>\n            {values.postType === 'Text' && (\n              <div className={classes.textInput}>\n                <ChatIcon className={classes.inputIcon} color=\"primary\" />\n                <TextInput\n                  name=\"textSubmission\"\n                  placeholder={`Enter text (HTML supported. For ex, \"<h1>Like this?</h1>\")`}\n                  multiline\n                  label=\"Text\"\n                  required={values.postType === 'Text'}\n                  fullWidth\n                  variant=\"outlined\"\n                  rows={4}\n                  maxRows={Infinity}\n                />\n              </div>\n            )}\n            {values.postType === 'Image' && (\n              <div className={classes.imageInput}>\n                <div className={classes.imageBtnsWrapper}>\n                  <ImageIcon className={classes.inputIcon} color=\"primary\" />\n                  <input\n                    type=\"file\"\n                    id=\"image-upload\"\n                    accept=\"image/*\"\n                    hidden\n                    onChange={(e) => fileInputOnChange(e, setFieldValue)}\n                    required={values.postType === 'Image'}\n                  />\n                  <Button\n                    component=\"label\"\n                    htmlFor=\"image-upload\"\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    fullWidth\n                    startIcon={\n                      values.imageSubmission ? (\n                        <CheckCircleIcon />\n                      ) : (\n                        <PublishIcon />\n                      )\n                    }\n                    size={isMobile ? 'small' : 'medium'}\n                    className={classes.selectBtn}\n                  >\n                    {values.imageSubmission\n                      ? `${isMobile ? '' : 'Selected '}\"${fileName}\"`\n                      : `Select Image`}\n                  </Button>\n                  {values.imageSubmission && (\n                    <IconButton\n                      onClick={() => clearFileSelection(setFieldValue)}\n                      color=\"secondary\"\n                      size={isMobile ? 'small' : 'medium'}\n                      className={classes.clearSelectionBtn}\n                    >\n                      <CancelIcon />\n                    </IconButton>\n                  )}\n                </div>\n                {values.imageSubmission && (\n                  <div className={classes.imagePreview}>\n                    <img\n                      alt={fileName}\n                      src={values.imageSubmission}\n                      width={isMobile ? 250 : 350}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n            {values.postType === 'Link' && (\n              <div className={classes.input}>\n                <LinkIcon className={classes.inputIcon} color=\"primary\" />\n                <TextInput\n                  name=\"linkSubmission\"\n                  type=\"text\"\n                  placeholder=\"Enter URL\"\n                  label=\"Link\"\n                  required={values.postType === 'Link'}\n                  fullWidth\n                  variant={actionType === 'edit' ? 'outlined' : 'standard'}\n                />\n              </div>\n            )}\n            <Button\n              type=\"submit\"\n              color=\"secondary\"\n              variant=\"contained\"\n              size=\"large\"\n              className={classes.submitButton}\n              disabled={isSubmitting}\n              startIcon={postToEditId ? <EditIcon /> : <PostAddIcon />}\n            >\n              {postToEditId\n                ? isSubmitting\n                  ? 'Updating'\n                  : 'Update'\n                : isSubmitting\n                ? 'Posting'\n                : 'Post'}\n            </Button>\n          </Form>\n        )}\n      </Formik>\n      <AlertMessage\n        error={error}\n        severity=\"error\"\n        clearError={() => setError(null)}\n      />\n    </div>\n  );\n};\n\nexport default AddPostForm;\n"]},"metadata":{},"sourceType":"module"}